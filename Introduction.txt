My notes from MySQL course on udemy by colt:
A database is a collection of data which can be manipulated by the tools provided in the database engine.

	Your App =====> || DBMS + DATABASE ||

SQL : Structured Query Langauge (Think it as a language you used to talk to databases)

1. Tutorial is based on MySql database. We are not trying to install MySql here. We will be using a container on c9.io website to run the mySql db.
2. Login to the c9 service. Create a new workspace and select any of the profile. We have selected html for minimal settings. Follow the below commands to use the mysql service.
	1. mysql-ctl start - Starts the db.
	2. mysql-ctl cli - Gives you the command line interface of the db.
	3. mysql-ctl stop - Stops the db services from running on the container.
	
3. Few more commands that you can try to execute on the sql cli are as follows:
	1. help; - gives you the help menu. usgae help, help Integer etc.,
	2. select @@hostname; - gives your name or the user session name.
	3. show databases; - shows all the databases present in the database server.
	
SQL is case insensitive CREATE or create is same.
More preferably use CAPS.

Creating a database:
	CREATE DATABASE DB_NAME; Ex: CREATE DATABASE DogApp; or CREATE DATABASE soap_app;

Deleting a database:
		DROP DATABASE DB_NAME; Ex: DROP DATABASE DogApp;

Using a specific database:
	- Use the "USE" key word to specific which database you want to use to execute the later queries on.
	Ex: USE DB_NAME;
	- To confirm that you are using a specific database use the following command.
		select database(); -> Output should be DB_NAME;
	- If you are not using any database the result would be "null".

Tables: 
	- Store data in a relational structure.
	- Bascially in rows and columns.
	- An app can have many tables. Too many tables.
	- NOT ALL DATABASES USE TABLES TO STORE DATA.
Data Types:
	- Every column must specify what type of data it must hold. 
	- There are several data types available.
	- Primary types are classified as follows:
		1) Numerics : INT, SMALLINT, LONGINT,MEDIUMINT,BIGINT,DECIMAL,NUMERIC,FLOAT,DOUBLE,BIT
		2) Strings : CHAR, VARCHAR,BINARY,VARBIARY,BLOB,TINYBLOB,MEDIUMBLOB,LONGBLOB,TEXT,TINYTEXT,MEDIUMTEXT,LONGTEXT,ENUM
		3) Date : DATE, DATETIME, TIMESTAMP, TIME, YEAR.

Initially we are gonna deal with two datatypes 
	Int - stores number, even negative!(SIGNED) Has a upper range. If you need to store a larger number than the upper ranger, look for a different data type.
	VARCHAR - Variable character, can store strings up to 255 character length. We can specify a limit on character length Ex; Name VARCHAR(10) - Name can have only 10 characters.
	
Table Creation:
	Syntax:
		CREATE TABLE table_name(
			column_name, data_type,
			column_name, data_type,..
			);
	
	- SHOW TABLES; //Shows list of all the tables in the current database.
	- SHOW COLUMNS FROM table_name; OR DESC table_name; //Shows columns, their type and bunch of other infromation associated with the columns.
	- DESCRIBE table_name; //Show all details related to the table.
	- Deleting a table from the data base.
		DROP TABLE table_name; //Similar to dropping a database.
	
Inserting data into the table:
	INSERT INTO table_name(column_name1, column_name2,...) 
	VALUES (column1_value,column2_value...);

	- While using the above fromat you need specifiy the columns in their right order as they are in the table. You can change them up, but make sure to maintain the same order in the values field.
	INSERT INTO table_name(column_name4, column_name534,....)
	VALUES(columns4_value, column534_value....)

	- If you are maintaining the column order that is present in the table, you need not speicify the column names after table_name. You can directly just write the values.
	INSERT INTO table_name
	VALUES(column1_value, columne2_value, column3_value,...)

	BULK INSERT:
		INSERT INTO table_name
		VALUES (col1_value, cole2_value,...),
				(col1_value2, col2_value2,...),
				.....
				(col1_valuen, col2_valuen,...);

SHOW WARNINGS; Displays all the warning that was encountered while executing the last query, if there is any.
				- Often times, database is run on strict mode. When it is, the users are not allowed to insert invalid data in to the tables.
				- If also, goes with the length limit that is placed on the field.
				- In strict mode all the warnings could end up being an error.
				- In order to change the strict mode, enter the query below:
					SET @@global.sql_mode= '';
				- To enable the strict mode back, enter the query below:
					set @@global.sql_mode='STRICT_TRANS_TABLES'

NOT NULL: If a field is specified as NOT NULL while creation of the table, then NULL values are not permitted in the records.
			- If you do not provide a value for a field which is declared as NOT NULL while inserting a value in to the records, it will insert a default value. (You can customize the default values too while creating the table)
			Ex: CREATE TABLE table_name(
					name VARCHAR(100) NOT NULL,
					age INT NOT NULL
				);

DEFAULT: While creating a field if default value is specified, then this value will be replaced, if the user does not specify any value for the field during inserting the record.
		- Note: However, NULL is still a value. Hence, if you specify a defaul value and do not set the field to be NOT NULL. Something like this is still valid.
			INSERT INTO table_name 
			VALUES(NULL, NULL,....)	

		Ex: CREATE TABLE table_name(
				name VARCHAR(50) NOT NULL DEFAULT 'Anonymous',
				age INT NOT NULL DEFAULT 999999
			);		

PRIMARY KEY:
	If a field is declared as a primary key, it can be used as a unique identifier for a record.
		- A primary key can only have unique values.
		- Once a primary key is deleted from the records, it cannot be reused.
		- We can set a primary key to Auto_Increment(If numeric)
		- A primary key can accept one NULL value(Not suggested)

	Ex: CREATE TABLE table_name(
		identifier INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
		name VARCHAR(50) NOT NULL DEFAULT 'no name'
		age INT NOT NULL DEFAULT 99
	);

CRUD:
	Stands for 
	C - Create Data
	R - Read Data
	U - Update Data
	D - Delete Data

SELECT Clause:
	- Select is used to retrieve information from the table.
	- Some of the possibilites for SELECT clause are given below:
		SELECT * FROM cats;  //Used to select all the columns and data in the cats table.
		SELECT name FROM cats;  //Used to select all the records of the column name in cats table.
		SELECT age FROM cats; //Used to select all the records of the column age in cats table.
		SELECT cat_id FROM cats; //Used to select all the records of the column cat_id in cats table.
		SELECT name, age FROM cats; 
		SELECT cat_id, name, age FROM cats; 
		SELECT age, breed, name, cat_id FROM cats; 
		SELECT cat_id, name, age, breed FROM cats; 

		- An alias as a text that is used to replace the text used to identify the field name while displaying the content.
		Ex: Select cat_id AS Identification from cats;
		+------------------+
		|	Identification |
		+------------------+
WHERE Clause:
	- Where clause is used to filter out the content.
	- You specify a criteria and any records that satisfy the criteria is retrieved and rest are discarded.
	- String criteria in WHERE is case insensitive. 
	Ex: WHERE name ="eGG" or WHERE name ="EGG" will retrieve the same records out from the database.
	- Some of the possibilites for WHERE clause are given below:
		SELECT * FROM cats WHERE age=4; 
		SELECT * FROM cats WHERE name='Egg'; 
		SELECT * FROM cats WHERE name='egG'; 

UPDATE Clause:
	- UPDATE clause is used to change the existing record data.
	- Typical use case is to update/change a users password.
	Ex:
		UPDATE table_name SET column_name = <NEW VALUE> WHERE <condition>
		UPDATE cats
		SET breed = 'Maine Coon'
		WHERE name ='Tammy'
	- It is possible to filter out records based of a mathematical operation.
	Ex:
		SELECT title, released_year FROM books
		WHERE released_year >= 2000 AND
		released_year % 2 != 0;

DELETE Clause:
	- DELETE clause is used to delete entries from the database tables.
	Ex:
		DELETE FROM table_name; // Deletes all the entires in the table called table_name.
		DELETE FROM table_name WHERE <condition> // Deletes all the entries in the table which satisfy the condition.

	- You can put all your sql code inside a .sql file and run the whole file at once.
	- This is useful when creating and inserting a whole bunch of data.
	- Once you create a .sql file. Put it in the workspace and then run the command "source <filename>.sql" to run the  file.

String Functions:
Concat:
	- Used to concat the fields in to a single column while retrieving.
	Ex: Select CONCAT(f_name,l_name) AS 'full name' FROM books;
	- We can add text to be concatinated in between the field names.
	Ex: Select CONCAT(f_name,' ',l_name) AS 'full name' FROM books;
		Select CONCAT(f_name,','l_name',') AS 'full name' FROM books;
	- There is a special implementation of CONCAT called CONCAT_WS which seperates the field using the separator specified.
	Ex: SELECT CONCAT_WS('-' f_name,l_name,title) FROM books; // Output: <f_name>-<l_name>-<title>

SUBSTRING or SUBSTR:
	- Used to extract a part of the string or a substring from a full text.
	- Ex: 	SELECT SUBSTRING('Hello World', 1, 4); // Output: Hell
			SELECT SUBSTRING('Hello World', 7);   // Output: World
			SELECT SUBSTRING('Hello World', 3, 8);
			SELECT SUBSTRING('Hello World', 3);
			SELECT SUBSTRING('Hello World', -3); //Output: rld (Takes the negative index and prints out the sub string to the end.)
			SELECT SUBSTRING('Hello World', -7);

- We can also combine SUBSTR and CONCAT. Example below:
	Ex: SELECT CONCAT
    	(
        	SUBSTRING(title, 1, 10),
        	'...'
    	) AS 'short title'
		FROM books;

REPLACE:
	- Used a replace a specific string or character with another string or character.
	- It is case sensitive. Hence if you want to replace 'o' from the String Olo. It won't replace 'O'.
	Ex: 	SELECT REPLACE('Hello World', 'Hell', '%$#@');
			SELECT REPLACE('Hello World', 'l', '7');
			SELECT REPLACE('Hello World', 'o', '0');
			SELECT REPLACE('HellO World', 'o', '*');
	- Just like substring, replace can also be used along side other functions.
	Ex: 	SELECT
    		SUBSTRING(REPLACE(title, 'e', '3'), 1, 10)
			FROM books;

REVERSE:
	- As the name suggests, this function returns the reverse of a string.
	Ex: SELECT REVERSE("HELLO WORLD"); // Output: DLROW OLLEH.

CHAR_LENGHT:
	- As the name suggest, returns the lenght of the string.
	Ex: SELECT CHAR_LENGHT("Hello World"); // Output: 11

UPPER, LOWER:
	- As the name suggest these functions are used to change the CASE of the string.
	Ex: SELECT UPPER("hello world"); // Output: HELLO WORLD
	Ex: SELECT LOWER("HELLO WORLd"); // Output: hello world

DISTINCT:
	- Gives out the distinct entries in the field. 
	- Works on string as well as numeric data.
	- If you apply distinct on multiple columns, it will return data DISTINCT across all the columns.
	- Two people may have same last_name, if you apply distinct only on the last_name columns. SQL only returns one entry for that last_name.
	- If you apply distinct on both first_name and last_name and first_name being differnt and same last_name. SQL will output two different entries.
	EX:     SELECT author_lname FROM books;
			SELECT DISTINCT author_lname FROM books;
			SELECT author_fname, author_lname FROM books;
			SELECT DISTINCT CONCAT(author_fname,' ', author_lname) FROM books;
			SELECT DISTINCT author_fname, author_lname FROM books;

ORDER BY:
	- This clause lets you to order your data in ascending or descending order.
	- Ordering works on both strings and numbers. Also, aplhanumeric content.
	- You can also apply order by on multiple columns. The data is first sorted by the first field and then later on by the second field.
	Ex:		    
			SELECT author_lname FROM books ORDER BY author_lname;
			SELECT author_lname FROM books ORDER BY author_lname DESC;
			SELECT released_year FROM books ORDER BY released_year;
			SELECT released_year FROM books ORDER BY released_year DESC;
			SELECT title, released_year, pages FROM books ORDER BY released_year;
			SELECT title, pages FROM books ORDER BY released_year;
			
			SELECT title, author_fname, author_lname 
			FROM books ORDER BY 2;						// You can just specify the position of the field in the select clause that you want to sort with. In the present query, the output is sorte dby author_fname which is the second field in SELECT clause.
			
			SELECT author_fname, author_lname FROM books 
			ORDER BY author_lname, author_fname;

LIMIT:
	- This clause lets you limit the number of records you want to show up on the console.
	- Say you want to just see top 5 books according to total sales. You can sort it by number of copies sold and limit it to 5.
	Ex:
		    SELECT title FROM books LIMIT 3;  // Limiting to first 3 books.
     				
			SELECT title, released_year FROM books 
			ORDER BY released_year DESC LIMIT 5; // Results in the top 5 books which were recently released.
			
			SELECT title, released_year FROM books 
			ORDER BY released_year DESC LIMIT 0,5; // Give out the first 5 books in the table.
			
			SELECT title, released_year FROM books 
			ORDER BY released_year DESC LIMIT 10,1; // Gives out the 11th book in the table.
			
			SELECT * FROM tbl LIMIT 95,18446744073709551615; // You have to specify a really large number to get all the entires from the table. There is no 'LAST' clause to indicate the end of table.

			
LIKE:
	- Like is used for pattern matching.
	- You can use a wild card character and a pattern to search through records for match.
	- You can use a infinite wildcard - %, or a single char wild card - _
	- If you want to look for a record which contains % or _ in the text itself. You have to use escape character '%\%%' or '%\_%'
	Ex:
	  		SELECT title, author_fname FROM books WHERE author_fname LIKE '%da%';
			SELECT title, author_fname FROM books WHERE author_fname LIKE 'da%';
			SELECT title FROM books WHERE  title LIKE 'the';
			SELECT title FROM books WHERE  title LIKE '%the';
			SELECT title FROM books WHERE title LIKE '%the%';

Aggregate Functions:

COUNT:
	- Counts the total number of records for a field.
	- We can add more clauses inside the count to filter out results. Like using DISTINCT.
	Ex:		    SELECT COUNT(*) FROM books;
				SELECT COUNT(author_fname) FROM books;
				SELECT COUNT(DISTINCT author_fname) FROM books;
				SELECT COUNT(DISTINCT author_lname, author_fname) FROM books;
				SELECT title FROM books WHERE title LIKE '%the%';
				SELECT COUNT(*) FROM books WHERE title LIKE '%the%';

GROUP BY:
	- It summarizes or aggregates identical data into single rows.
	Ex:
			SELECT author_lname, COUNT(*) 
			FROM books GROUP BY author_lname;	
			
			SELECT author_fname, author_lname, COUNT(*) FROM books GROUP BY author_lname;
			SELECT author_fname, author_lname, COUNT(*) FROM books GROUP BY author_lname, author_fname;
			SELECT released_year, COUNT(*) FROM books GROUP BY released_year;
			SELECT CONCAT('In ', released_year, ' ', COUNT(*), ' book(s) released') AS year FROM books GROUP BY released_year;

MIN and MAX:
	- MIN finds the least value of the field. 
	- MAX finds the highest value of the field.
	- Works on numerical data only. Doesn't give out the proper output if used to retrieve string related to the record without using a GROUP BY clause.
	Ex:
		SELECT MIN(pages) FROM books;
		SELECT MAX(pages) FROM books;
		SELECT MAX(pages), title FROM books; // Results in wrong title. The title and Max(pages) aren't related in this case.

	- One potential solution for the problem above is using a sub query.
	- A subquery is a query within a query. 
	- The subquery(sometimes referred as inner query) is executed first, the outer query uses the result set of the inner query to further evaluation.
	- Point to note: Using subqueries is not always suggested as it takes longer to evaluate. As the inner query needs to execute first and then the outer query.
	- In case it is possible to avoid nested queries do so.

	- Min and Max are just like other Aggregate functions and can be used alongside group by.
	Ex:		SELECT
				author_fname,
				author_lname,
				Max(pages)
			FROM books
			GROUP BY author_lname,
					author_fname;
			
			SELECT
				CONCAT(author_fname, ' ', author_lname) AS author,
				MAX(pages) AS 'longest book'
			FROM books
			GROUP BY author_lname,
					author_fname;

SUM:
	- Just as the name suggests, when applied on a specific field, returns the summation of all the records present in the field.
	Ex:
		SELECT author_fname,
       		author_lname,
       		Sum(pages)
		FROM books
		GROUP BY
    		author_lname,
    		author_fname;

AVG:
	- Average returns the average of the field it is applied on.
	Ex:
		SELECT author_fname, author_lname, AVG(pages) FROM books
		GROUP BY author_lname, author_fname;

Some important Data Types:
CHAR:
	- Used to store strings.
	- It is of fixed length.
	- If the string entered is smaller than the specified length, it is right padded with spaces.
	- The char uses fixed amount of memory to store the strings. 
	Ex: 
		CHAR(4)
		entered text = ab stored as 'ab  ' 4bytes
		entered text = a stored as 'a   ' 4 bytes
		entered text = abcdef stored as 'abcd' 4bytes 

DECIMAL:
	- Used to store  a decimal value.
	- Usage DECIMAL(5,2)
	- 5 indicated the largest number stored(Including the digits after decimal point. In this case it would be 999.99), 2 indicated the number digits to store after decimal point.
	- Exact numbers. No approximation. There can be some rounding off.
FLOAT and DOUBLE:
	- Stores approximate values.
	- Not as exact as DECIMAL.
	- If precision is important for the application, do not use float or double.
	- Float and double can be used to store larger numbers using less space in the memory.
	- Float is precise till 7 digits where as double is precise untill 15 digits

DATE:
	- Stores date, doesnot store any times. YYYY-MM-DD

TIME
	- Stores time no date HH:MM:SS

DATETIME:
	- Stores date and time. YYYY-MM-DD HH:MM:SS

CURDATE():
	- Returns the current date.

CURTIME():
	- Returns the current time.

NOW():
	- Returns the current date time.

DATE_FORMAT(DATE, FORMAT):
	- Takes in the DATE/TIME/DATETIME field and the converts it to the specified format.

DATEDIFF():
	- Gives out the no of days between two dates.

DATEADD(DATE, Interval DD/MM/YY HH/MM/SS Unit(Day, month, year, hours, minutes, seconds)):
	- Give a DATE and what unit of date you want to add to it.

	Ex: 	SELECT DATEDIFF(NOW(), birthdate) FROM people; 
			SELECT name, birthdate, DATEDIFF(NOW(), birthdate) FROM people;
			SELECT birthdt FROM people;
			SELECT birthdt, DATE_ADD(birthdt, INTERVAL 1 MONTH) FROM people;
			SELECT birthdt, DATE_ADD(birthdt, INTERVAL 10 SECOND) FROM people;
			SELECT birthdt, DATE_ADD(birthdt, INTERVAL 3 QUARTER) FROM people;
			SELECT birthdt, birthdt + INTERVAL 1 MONTH FROM people;
			SELECT birthdt, birthdt - INTERVAL 5 MONTH FROM people;
			SELECT birthdt, birthdt + INTERVAL 15 MONTH + INTERVAL 10 HOUR FROM people;

TIMESTAMP:
	- Stores date and time info.
	- Uses 4 bytes
	- Stores date btw JAN 1st 1970 to Jan 19th 2038.
	- DATETIME takes 8 bytes and stores date which range longer.
	Ex:
			CREATE TABLE comments2 (
   						 content VARCHAR(100),
   						 changed_at TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP
			);

	- changed_at is setup in such a way that when an update query is ran it automatically updates the TIME_STAMP.
	
Logical Operators:
- Usually used in the WHERE clause to filter out the result set.
	- 1 is TRUE and 0 is FALSE in MySQL.
	- Not equals (!=): Ex: year != 2017
	- Equal (=): Ex: year = 2007
	- LIKE: Ex: name LIKE '%dave%'
	- NOT LIKE: Ex: name NOT LIKE '%Jit%'
	- Greater Than (>): age > 10;
	- Less Than (<): age < 25;
	- Logical AND (&& or AND) name = 'Jitendra' && age = 27 (or) name = 'Jitendra' AND age = 27
	- Logical OR (|| or OR) region = 'India' || region ='US' (or) region = 'India' OR region ='US'
	- BETWEEN: Generates the results satisfying the range specified. released_year BETWEEN 2004 AND 2012 (Inclusive of the boundaries)
	- NOT BETWEEN: Generates the results not satisfying the range specified. released_year NOT BETWEEN 2004 AND 2015 (Exclusive of the boundaries)
	- CAST(): Takes two inputs, one a field or value to convert. Second is the type you want the field/value to convert into.
			- Often time when using date in filter, MySQL converts the string to date automatically. However, it is slightly slower.
				Ex:	SELECT name, birthdt FROM people WHERE birthdt BETWEEN '1980-01-01' AND '2000-01-01';
			- We can explicity use CAST() to convert the field into the DATETIME format to process the query faster.
				Ex:	SELECT name, birthdt 
					FROM people
					WHERE birthdt 
					BETWEEN CAST('1980-01-01' AS DATETIME)
    					AND CAST('2000-01-01' AS DATETIME);
	- IN : Retuns the records that exaclty match the criteria specified in the list.
		Ex: SELECT title, released_year FROM books
			WHERE released_year IN (2017, 1985);
	-NOT IN: Just opposite of IN.
		Ex: SELECT title, released_year FROM books
			WHERE released_year >= 2000
			AND released_year NOT IN 
			(2000,2002,2004,2006,2008,2010,2012,2014,2016);
	- CASE: Similar to the programming languages SWITCH cases, we can provide mulitple cases (Image it to be like a gigantic if else tree)
		Ex: SELECT title, stock_quantity,
				CASE 
					WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
					WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
					WHEN stock_quantity BETWEEN 101 AND 150 THEN '***'
					ELSE '****'
				END AS STOCK
			FROM books;


Storing data in multiple tables:
	- When creating a database schema it is a good idea to store them in multiple tables.
	- By dividing the relavent information in to multiple tables, we avoid wastage of space.
	- Generally we use BNF rules to generate schemas.
	- When dividing the data in to tables, always put a primary key for each table.
	- Apply foreign key(References to a primary key in one of the existing tables) wherever applicable.
	- We can use joins on these constraints to generate the huge dataset to perform analysis on.
	- To create a foreign key from a primary key, the primary key need to exists in the db first.
	- You cannot delete a primary key table if it is reference a foreign key in another table(s).

Foreign Keys:
	- Ex:     CREATE TABLE customers(
				id INT AUTO_INCREMENT PRIMARY KEY,
				first_name VARCHAR(100),
				last_name VARCHAR(100),
				email VARCHAR(100)
			);
			CREATE TABLE orders(
				id INT AUTO_INCREMENT PRIMARY KEY,
				order_date DATE,
				amount DECIMAL(8,2),
				customer_id INT,
				FOREIGN KEY(customer_id) REFERENCES customers(id)
			);

JOINS:
CROSS JOIN: Also called cartesian join. Just a cross multiplication between two tables. 5 * 5 = 25.
			Mostly meaningless join.
			Ex: Select * from customers, orders;

ONE TO MANY:
INNER JOIN: IMPLICIT SYNTAX. Taking the intersection of two tables.
			Ex:     SELECT first_name, last_name, order_date, amount
    				FROM customers, orders 
        			WHERE customers.id = orders.customer_id;

			EXPLICIT JOIN SYNTAX
			Ex: 	SELECT * FROM customers
					JOIN orders
    				ON customers.id = orders.customer_id;
LEFT JOIN: - Takes everything from left table and intersection of both the tables and displays them.
		   - Need to specify LEFT JOIN. Instead of just join.
		   Ex:	    SELECT first_name, last_name, order_date, amount
					FROM customers
					LEFT JOIN orders
						ON customers.id = orders.customer_id; 

					SELECT 
						first_name, 
						last_name,
						IFNULL(SUM(amount), 0) AS total_spent
					FROM customers
					LEFT JOIN orders
						ON customers.id = orders.customer_id
					GROUP BY customers.id
					ORDER BY total_spent;

RIGHT JOIN: - Takes everything from the right table and the intersection results and displays them.
			- Need to specify RIGHT JOIN.
			Ex:		SELECT 
						IFNULL(first_name,'MISSING') AS first, 
						IFNULL(last_name,'USER') as last, 
						order_date, 
						amount, 
						SUM(amount)
					FROM customers
					RIGHT JOIN orders
						ON customers.id = orders.customer_id
					GROUP BY first_name, last_name;

CASCADE ON DELETE:
		- When this option is set. If there is a foreign key constraint set on a primary key column. We can delete the key records and it will delete all the corresponding foreign key records in other tables.
		Ex:		CREATE TABLE customers(
				id INT AUTO_INCREMENT PRIMARY KEY,
				first_name VARCHAR(100),
				last_name VARCHAR(100),
				email VARCHAR(100)
				);
			
				CREATE TABLE orders(
					id INT AUTO_INCREMENT PRIMARY KEY,
					order_date DATE,
					amount DECIMAL(8,2),
					customer_id INT,
					FOREIGN KEY(customer_id) 
						REFERENCES customers(id)
						ON DELETE CASCADE
				);

MANY TO MANY:
	- Two different tables connected to each other using another table.
	Ex: Tv_Series ========> Reviews <======== Reviewer
		The tables Tv_Series and Reviewer are linked through Reviews table.
	
Mini Instagram Schema:
	    CREATE TABLE users (
        id INTEGER AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(255) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT NOW()
    );
     
    CREATE TABLE photos (
        id INTEGER AUTO_INCREMENT PRIMARY KEY,
        image_url VARCHAR(255) NOT NULL,
        user_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        FOREIGN KEY(user_id) REFERENCES users(id)
    );
     
    CREATE TABLE comments (
        id INTEGER AUTO_INCREMENT PRIMARY KEY,
        comment_text VARCHAR(255) NOT NULL,
        photo_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        FOREIGN KEY(photo_id) REFERENCES photos(id),
        FOREIGN KEY(user_id) REFERENCES users(id)
    );
     
    CREATE TABLE likes (
        user_id INTEGER NOT NULL,
        photo_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        FOREIGN KEY(user_id) REFERENCES users(id),
        FOREIGN KEY(photo_id) REFERENCES photos(id),
        PRIMARY KEY(user_id, photo_id)
    );
     
    CREATE TABLE follows (
        follower_id INTEGER NOT NULL,
        followee_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        FOREIGN KEY(follower_id) REFERENCES users(id),
        FOREIGN KEY(followee_id) REFERENCES users(id),
        PRIMARY KEY(follower_id, followee_id)
    );
     
    CREATE TABLE tags (
      id INTEGER AUTO_INCREMENT PRIMARY KEY,
      tag_name VARCHAR(255) UNIQUE,
      created_at TIMESTAMP DEFAULT NOW()
    );
     
    CREATE TABLE photo_tags (
        photo_id INTEGER NOT NULL,
        tag_id INTEGER NOT NULL,
        FOREIGN KEY(photo_id) REFERENCES photos(id),
        FOREIGN KEY(tag_id) REFERENCES tags(id),
        PRIMARY KEY(photo_id, tag_id)
    );

-- Multi Column Primary Key are also called as Composite Keys.

- Use the ig-clone-data.sql to create dummy db to practise quering.
- Use the solutions.sql to find out the questions and answers for them.


Database triggers:
- Triggers are used are like action listeners. They look for a specific event to occur and if the event does occur, it performs the specified action.
- Syntax:
	CREATE TRIGGER trigger_name
		trigger_time trigger_event ON table_name FOR EACH ROW
	BEGIN
	.....
	END;

- Possible values for the below fields:
	1. trigger_time : BEFORE, AFTER
	2. trigger_event : INSERT, UPDATE, DELETE
	3. table_name : The name on the table on which the trigger to apply.


	Ex: Inserting only users who are adults inside the users table. Once you create a table users(name, age as fields) and run this trigger, it will execute everytime you try to insert data.
		It checks if the user is above 18 or not. 

		DELIMITER $$

			CREATE TRIGGER must_be_adult
				BEFORE INSERT ON users FOR EACH ROW
				BEGIN
					IF NEW.age < 18
					THEN
						SIGNAL SQLSTATE '45000'  -- SQLSTATE are error codes which are standard error codes across different SQL databases. MYSQL also has MYSQL specific error codes. 
								SET MESSAGE_TEXT = 'Must be an adult!';
					END IF;
				END;
			$$

		DELIMITER ;

- Whenever there is a error. MySQL returns two types of error codes.
	1. MySQL specific error code
	2. SQLSIGNAL code, which is standard across SQL databases.

	450000 - Is user defined Error code. It means, that the developer should handle the error. When this error code is returned.

	NEW - Contains the new values that is being inserted in to the table. 
		- Used when you have a INSERT or UPDATE statements.
		Ex: INSERT INTO email VALUES("somerandomemail@idontknow.com");
		NEW.email = "somerandomemail@idontknow.com"

	OLD - Contains the previous value of the filed that is being removed or updated.
		- Used when you have a DELETE OR UPDATE statements.

	DELIMITER - is used to specify the delimiter that MYSQL uses to set the end of a query.
			  - Default delimited is ;. Meaning as soon as MYSQL reads a semi colon it executes the query.
			  - However, in the example above, we have seen that we encounter a ; at the "END IF" statement. This is not where the trigger should end.
			  - Since, the delimiter is set to ; MySQL executes the trigger and gives out an error message.
			  - Using DELIMITER we are changing the default delimited to something else. Execute the trigger and change the delimited back to default.

			  Syntax:
			  DELIMITER <SYMBOL_FOR_DELIMITER>
			  	//SQL Trigger or query

			  <SYMBOL_FOR_DELIMITER> // This indicates the end of the query/trigger.
			  DELIMITER ; //Setting delimiter back to default.
			

	Ex: Inserting data into another table based on a event on a seperate table.
		DELIMITER $$

			CREATE TRIGGER create_unfollow
				AFTER DELETE ON follows FOR EACH ROW 
			BEGIN
				INSERT INTO unfollows
				SET follower_id = OLD.follower_id,
					followee_id = OLD.followee_id;
			END$$

		DELIMITER ;

	
	SHOW TRIGGERS; - Shows all the triggers in the current database.
	DROP TRIGGER trigger_name; - Drops the trigger with trigger_name;
	