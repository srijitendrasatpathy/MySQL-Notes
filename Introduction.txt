SQL tutorial from udemy. By colt:
A database is a collection of data which can be manipulated by the tools provided in the database engine.

	Your App =====> || DBMS + DATABASE ||

SQL : Structured Query Langauge (Think it as a language you used to talk to databases)

1. Tutorial is based on MySql database. We are not trying to install MySql here. We will be using a container on c9.io website to run the mySql db.
2. Login to the c9 service. Create a new workspace and select any of the profile. We have selected html for minimal settings. Follow the below commands to use the mysql service.
	1. mysql-ctl start - Starts the db.
	2. mysql-ctl cli - Gives you the command line interface of the db.
	3. mysql-ctl stop - Stops the db services from running on the container.
	
3. Few more commands that you can try to execute on the sql cli are as follows:
	1. help; - gives you the help menu. usgae help, help Integer etc.,
	2. select @@hostname; - gives your name or the user session name.
	3. show databases; - shows all the databases present in the database server.
	
SQL is case insensitive CREATE or create is same.
More preferably use CAPS.

Creating a database:
	CREATE DATABASE DB_NAME; Ex: CREATE DATABASE DogApp; or CREATE DATABASE soap_app;

Deleting a database:
		DROP DATABASE DB_NAME; Ex: DROP DATABASE DogApp;

Using a specific database:
	- Use the "USE" key word to specific which database you want to use to execute the later queries on.
	Ex: USE DB_NAME;
	- To confirm that you are using a specific database use the following command.
		select database(); -> Output should be DB_NAME;
	- If you are not using any database the result would be "null".

Tables: 
	- Store data in a relational structure.
	- Bascially in rows and columns.
	- An app can have many tables. Too many tables.
	- NOT ALL DATABASES USE TABLES TO STORE DATA.
Data Types:
	- Every column must specify what type of data it must hold. 
	- There are several data types available.
	- Primary types are classified as follows:
		1) Numerics : INT, SMALLINT, LONGINT,MEDIUMINT,BIGINT,DECIMAL,NUMERIC,FLOAT,DOUBLE,BIT
		2) Strings : CHAR, VARCHAR,BINARY,VARBIARY,BLOB,TINYBLOB,MEDIUMBLOB,LONGBLOB,TEXT,TINYTEXT,MEDIUMTEXT,LONGTEXT,ENUM
		3) Date : DATE, DATETIME, TIMESTAMP, TIME, YEAR.

Initially we are gonna deal with two datatypes 
	Int - stores number, even negative!(SIGNED) Has a upper range. If you need to store a larger number than the upper ranger, look for a different data type.
	VARCHAR - Variable character, can store strings up to 255 character length. We can specify a limit on character length Ex; Name VARCHAR(10) - Name can have only 10 characters.
	
Table Creation:
	Syntax:
		CREATE TABLE table_name(
			column_name, data_type,
			column_name, data_type,..
			);
	
	- SHOW TABLES; //Shows list of all the tables in the current database.
	- SHOW COLUMNS FROM table_name; OR DESC table_name; //Shows columns, their type and bunch of other infromation associated with the columns.
	- DESCRIBE table_name; //Show all details related to the table.
	- Deleting a table from the data base.
		DROP TABLE table_name; //Similar to dropping a database.
	
Inserting data into the table:
	INSERT INTO table_name(column_name1, column_name2,...) 
	VALUES (column1_value,column2_value...);

	- While using the above fromat you need specifiy the columns in their right order as they are in the table. You can change them up, but make sure to maintain the same order in the values field.
	INSERT INTO table_name(column_name4, column_name534,....)
	VALUES(columns4_value, column534_value....)

	- If you are maintaining the column order that is present in the table, you need not speicify the column names after table_name. You can directly just write the values.
	INSERT INTO table_name
	VALUES(column1_value, columne2_value, column3_value,...)

	BULK INSERT:
		INSERT INTO table_name
		VALUES (col1_value, cole2_value,...),
				(col1_value2, col2_value2,...),
				.....
				(col1_valuen, col2_valuen,...);