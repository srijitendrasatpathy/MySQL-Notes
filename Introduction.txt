SQL tutorial from udemy. By colt:
A database is a collection of data which can be manipulated by the tools provided in the database engine.

	Your App =====> || DBMS + DATABASE ||

SQL : Structured Query Langauge (Think it as a language you used to talk to databases)

1. Tutorial is based on MySql database. We are not trying to install MySql here. We will be using a container on c9.io website to run the mySql db.
2. Login to the c9 service. Create a new workspace and select any of the profile. We have selected html for minimal settings. Follow the below commands to use the mysql service.
	1. mysql-ctl start - Starts the db.
	2. mysql-ctl cli - Gives you the command line interface of the db.
	3. mysql-ctl stop - Stops the db services from running on the container.
	
3. Few more commands that you can try to execute on the sql cli are as follows:
	1. help; - gives you the help menu. usgae help, help Integer etc.,
	2. select @@hostname; - gives your name or the user session name.
	3. show databases; - shows all the databases present in the database server.
	
SQL is case insensitive CREATE or create is same.
More preferably use CAPS.

Creating a database:
	CREATE DATABASE DB_NAME; Ex: CREATE DATABASE DogApp; or CREATE DATABASE soap_app;

Deleting a database:
		DROP DATABASE DB_NAME; Ex: DROP DATABASE DogApp;

Using a specific database:
	- Use the "USE" key word to specific which database you want to use to execute the later queries on.
	Ex: USE DB_NAME;
	- To confirm that you are using a specific database use the following command.
		select database(); -> Output should be DB_NAME;
	- If you are not using any database the result would be "null".

Tables: 
	- Store data in a relational structure.
	- Bascially in rows and columns.
	- An app can have many tables. Too many tables.
	- NOT ALL DATABASES USE TABLES TO STORE DATA.
Data Types:
	- Every column must specify what type of data it must hold. 
	- There are several data types available.
	- Primary types are classified as follows:
		1) Numerics : INT, SMALLINT, LONGINT,MEDIUMINT,BIGINT,DECIMAL,NUMERIC,FLOAT,DOUBLE,BIT
		2) Strings : CHAR, VARCHAR,BINARY,VARBIARY,BLOB,TINYBLOB,MEDIUMBLOB,LONGBLOB,TEXT,TINYTEXT,MEDIUMTEXT,LONGTEXT,ENUM
		3) Date : DATE, DATETIME, TIMESTAMP, TIME, YEAR.

Initially we are gonna deal with two datatypes 
	Int - stores number, even negative!(SIGNED) Has a upper range. If you need to store a larger number than the upper ranger, look for a different data type.
	VARCHAR - Variable character, can store strings up to 255 character length. We can specify a limit on character length Ex; Name VARCHAR(10) - Name can have only 10 characters.
	
Table Creation:
	Syntax:
		CREATE TABLE table_name(
			column_name, data_type,
			column_name, data_type,..
			);
	
	- SHOW TABLES; //Shows list of all the tables in the current database.
	- SHOW COLUMNS FROM table_name; OR DESC table_name; //Shows columns, their type and bunch of other infromation associated with the columns.
	- DESCRIBE table_name; //Show all details related to the table.
	- Deleting a table from the data base.
		DROP TABLE table_name; //Similar to dropping a database.
	
Inserting data into the table:
	INSERT INTO table_name(column_name1, column_name2,...) 
	VALUES (column1_value,column2_value...);

	- While using the above fromat you need specifiy the columns in their right order as they are in the table. You can change them up, but make sure to maintain the same order in the values field.
	INSERT INTO table_name(column_name4, column_name534,....)
	VALUES(columns4_value, column534_value....)

	- If you are maintaining the column order that is present in the table, you need not speicify the column names after table_name. You can directly just write the values.
	INSERT INTO table_name
	VALUES(column1_value, columne2_value, column3_value,...)

	BULK INSERT:
		INSERT INTO table_name
		VALUES (col1_value, cole2_value,...),
				(col1_value2, col2_value2,...),
				.....
				(col1_valuen, col2_valuen,...);

SHOW WARNINGS; Displays all the warning that was encountered while executing the last query, if there is any.
				- Often times, database is run on strict mode. When it is, the users are not allowed to insert invalid data in to the tables.
				- If also, goes with the length limit that is placed on the field.
				- In strict mode all the warnings could end up being an error.
				- In order to change the strict mode, enter the query below:
					SET @@global.sql_mode= '';
				- To enable the strict mode back, enter the query below:
					set @@global.sql_mode='STRICT_TRANS_TABLES'

NOT NULL: If a field is specified as NOT NULL while creation of the table, then NULL values are not permitted in the records.
			- If you do not provide a value for a field which is declared as NOT NULL while inserting a value in to the records, it will insert a default value. (You can customize the default values too while creating the table)
			Ex: CREATE TABLE table_name(
					name VARCHAR(100) NOT NULL,
					age INT NOT NULL
				);

DEFAULT: While creating a field if default value is specified, then this value will be replaced, if the user does not specify any value for the field during inserting the record.
		- Note: However, NULL is still a value. Hence, if you specify a defaul value and do not set the field to be NOT NULL. Something like this is still valid.
			INSERT INTO table_name 
			VALUES(NULL, NULL,....)	

		Ex: CREATE TABLE table_name(
				name VARCHAR(50) NOT NULL DEFAULT 'Anonymous',
				age INT NOT NULL DEFAULT 999999
			);		

PRIMARY KEY:
	If a field is declared as a primary key, it can be used as a unique identifier for a record.
		- A primary key can only have unique values.
		- Once a primary key is deleted from the records, it cannot be reused.
		- We can set a primary key to Auto_Increment(If numeric)
		- A primary key can accept one NULL value(Not suggested)

	Ex: CREATE TABLE table_name(
		identifier INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
		name VARCHAR(50) NOT NULL DEFAULT 'no name'
		age INT NOT NULL DEFAULT 99
	);

CRUD:
	Stands for 
	C - Create Data
	R - Read Data
	U - Update Data
	D - Delete Data

SELECT Clause:
	- Select is used to retrieve information from the table.
	- Some of the possibilites for SELECT clause are given below:
		SELECT * FROM cats;  //Used to select all the columns and data in the cats table.
		SELECT name FROM cats;  //Used to select all the records of the column name in cats table.
		SELECT age FROM cats; //Used to select all the records of the column age in cats table.
		SELECT cat_id FROM cats; //Used to select all the records of the column cat_id in cats table.
		SELECT name, age FROM cats; 
		SELECT cat_id, name, age FROM cats; 
		SELECT age, breed, name, cat_id FROM cats; 
		SELECT cat_id, name, age, breed FROM cats; 

		- An alias as a text that is used to replace the text used to identify the field name while displaying the content.
		Ex: Select cat_id AS Identification from cats;
		+------------------+
		|	Identification |
		+------------------+
WHERE Clause:
	- Where clause is used to filter out the content.
	- You specify a criteria and any records that satisfy the criteria is retrieved and rest are discarded.
	- String criteria in WHERE is case insensitive. 
	Ex: WHERE name ="eGG" or WHERE name ="EGG" will retrieve the same records out from the database.
	- Some of the possibilites for WHERE clause are given below:
		SELECT * FROM cats WHERE age=4; 
		SELECT * FROM cats WHERE name='Egg'; 
		SELECT * FROM cats WHERE name='egG'; 

UPDATE Clause:
	- UPDATE clause is used to change the existing record data.
	- Typical use case is to update/change a users password.
	Ex:
		UPDATE table_name SET column_name = <NEW VALUE> WHERE <condition>
		UPDATE cats
		SET breed = 'Maine Coon'
		WHERE name ='Tammy'

DELETE Clause:
	- DELETE clause is used to delete entries from the database tables.
	Ex:
		DELETE FROM table_name; // Deletes all the entires in the table called table_name.
		DELETE FROM table_name WHERE <condition> // Deletes all the entries in the table which satisfy the condition.

	- You can put all your sql code inside a .sql file and run the whole file at once.
	- This is useful when creating and inserting a whole bunch of data.
	- Once you create a .sql file. Put it in the workspace and then run the command "source <filename>.sql" to run the  file.

String Functions:
Concat:
	- Used to concat the fields in to a single column while retrieving.
	Ex: Select CONCAT(f_name,l_name) AS 'full name' FROM books;
	- We can add text to be concatinated in between the field names.
	Ex: Select CONCAT(f_name,' ',l_name) AS 'full name' FROM books;
		Select CONCAT(f_name,','l_name',') AS 'full name' FROM books;
	- There is a special implementation of CONCAT called CONCAT_WS which seperates the field using the separator specified.
	Ex: SELECT CONCAT_WS('-' f_name,l_name,title) FROM books; // Output: <f_name>-<l_name>-<title>
